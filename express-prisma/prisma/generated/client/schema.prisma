generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  username  String   @unique
  fullname  String?
  bio       String?  @db.Text
  avatar    String?  @default("https://res.cloudinary.com/dn6uglajh/image/upload/v1733990935/blank-image_yfczs3.jpg")
  isVerify  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post[]
  Like      Like[]
  Order     Order[]
  Event     Event[]
}

model Post {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  caption   String?
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  Like      Like[]
}

model Like {
  postId   Int
  userId   Int
  cretedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@id([postId, userId])
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User     @relation(fields: [userId], references: [id])
  Ticket Ticket[]
}

model Ticket {
  id        String   @id @default(uuid())
  eventId   String
  category  String
  price     Int
  quota     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event   @relation(fields: [eventId], references: [id])
  Order Order[]
}

model Order {
  id         String      @id @default(uuid())
  userId     Int
  ticketId   String
  qty        Int
  amount     Int
  status     StatusOrder @default(PENDING)
  invoiceUrl String?
  expiredAt  DateTime
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  ticket Ticket @relation(fields: [ticketId], references: [id])
}

enum StatusOrder {
  PENDING
  PAID
  EXPIRED
  CANCEL
}
